---
/* Component for rendering the main navigation with theme toggle.
...
*/

import type { NavEntry } from "../../Types/types";

import ToggleTheme from "@components/Astro/ToggleTheme.astro";
import Link from "@components/Astro/Link.astro";

interface Props {
	// Array of navigation links //
	links: NavEntry[];
	// Optional theme names for the toggle //
	themeNames?: string[];
	// Optional CSS classes //
	class?: string | undefined;
}

const { links = [], class: className } = Astro.props;

const pathname = new URL(Astro.request.url).pathname;
---

<nav
	id="main-navigation"
	aria-label="Main navigation"
	class:list={["flex items-center justify-between flex-wrap z-10 px-4 py-2", className]}
>
    <div class="block sm:hidden">
        <button id="hamburger-button" class="p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white" aria-controls="nav-menu" aria-expanded="false">
            <span class="sr-only">Open main menu</span>
            <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
        </button>
    </div>

    <div id="nav-menu" class="w-full sm:flex sm:items-center sm:w-auto hidden sm:!flex">
        <ul class="flex flex-col sm:flex-row sm:flex-wrap items-center sm:mr-auto">
            {
                links.map((obj) => (
                    <li class="px-2">
                        <Link
                            href={obj.href}
                            class:list={["text-lg", "no-underline", "uppercase", { active: obj.href === pathname }]}
                            text={obj.text}
                        />
                    </li>
                ))
            }
        </ul>
        <div>
            <ToggleTheme />
        </div>
    </div>
</nav>

<script>
    function setupNav() {
        const hamburgerButton = document.getElementById('hamburger-button');
        const navMenu = document.getElementById('nav-menu');

        if (hamburgerButton && navMenu) {
            if (hamburgerButton.dataset.listenerAttached) {
                return;
            }

            hamburgerButton.addEventListener('click', () => {
                navMenu.classList.toggle('hidden');
                const isHidden = navMenu.classList.contains('hidden');
                hamburgerButton.setAttribute('aria-expanded', isHidden ? 'false' : 'true');
            });
            hamburgerButton.dataset.listenerAttached = 'true';
        }
    }

    setupNav();

    document.addEventListener('astro:page-load', setupNav);
</script>

<style>
	nav a {
		text-decoration: none;
		transition: color 0.2s ease-in-out;
	}

	nav a:hover {
		color: var(--theme-accent);
	}

	nav a.active {
		font-weight: 700;
	}

	@media screen and (width >= 1670px) {
		#main-navigation {
			padding-left: 0;
			padding-right: 0;
		}
	}
</style>

<style is:global>
    #main-navigation div {
        margin: 0;
        padding: 0;
    }
    #main-navigation ul {
        margin: 0;
        padding: 0;
    }
    #main-navigation li {
        margin: 0;
        line-height: normal;
    }
    #main-navigation a {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        display: inline-block; /* Ensures padding is applied correctly */
    }
</style>