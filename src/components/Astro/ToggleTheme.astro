---
/* Component for theme switching with dropdown menu.
 *
 * Props:
 * - class?: string - Additional CSS classes
 *
 * Example usage:
 * <ToggleTheme class="ml-auto" />
 *
 * Notes:
 * - Persists theme in localStorage
 * - Supports system theme detection
 * - Keyboard accessible dropdown
 * - Handles view transitions
 * - Theme-based styling
 */

import { Icon } from "astro-icon/components";
import { themeNames } from "@utils/themeNames";

interface Props {
	class?: string | undefined;
}

const { class: className } = Astro.props;
const options = { "rounded-theme": true };
let selectedTheme = themeNames[0];
---

<div class:list={["relative inline-block mx-0 px-0", className]}>
	<div
		class:list={["bg-theme-secondary text-theme-secondary text-sm tracking-widest min-w-24 border border-theme-secondary shadow shadow-theme-primary m-0", options]}
	>
		<Icon
			name="ri:paint-fill"
			size="16"
			class="absolute left-3"
		/>
		<button
			id="theme-button"
			aria-haspopup="listbox"
			aria-expanded="false"
			class="w-full text-left pl-8 pr-2 py-0 uppercase"
		>
			{selectedTheme.replace("theme-", "")}
		</button>
		<ul
			id="theme-dropdown"
			role="listbox"
			tabindex="-1"
			class:list={["absolute right-0 top-12 z-10 bg-theme-primary text-theme-primary border border-theme-primary m-0 shadow-md shadow-theme-grey p-1 min-w-full w-max opacity-0 invisible -translate-y-2 transition-all duration-150 ease-in-out", options]}
		>
			{
				themeNames.map((name) => (
					<li
						role="option"
						tabindex="0"
						class="theme-option hover:text-theme-secondary hover:bg-theme-secondary cursor-pointer uppercase mx-0 py-2 px-2 first:pt-2 last:pb-2 text-left pl-4"
						data-theme={name}
					>
						<span class="text-sm block pl-0 pr-2 whitespace-nowrap overflow-hidden text-ellipsis">
							{name.replace("theme-", "").replaceAll("-", " ")}
						</span>
					</li>
				))
			}
		</ul>
	</div>
</div>

<style>
	#theme-dropdown.active {
		@apply opacity-100 visible translate-y-0;
	}
</style>

<script is:inline>
	var setTheme = (theme) => {
		var target = document.documentElement;
		target.classList.add(theme);
		document.getElementById("theme-button").textContent = theme
			.replace("theme-", "")
			.replaceAll("-", " ");
		target.classList.forEach((className) => {
			if (className.startsWith("theme-") && className !== theme) {
				target.classList.remove(className);
			}
		});
		localStorage.setItem("theme", theme);
	};

	var currentTheme = localStorage.getItem("theme");
	if (currentTheme) {
		setTheme(currentTheme);
	} else {
		var prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
		var prefersLight = window.matchMedia(
			"(prefers-color-scheme: light)"
		).matches;
		setTheme(
			prefersDark
				? "theme-dark"
				: prefersLight
					? "theme-light"
					: "theme-Alkaline"
		);
	}

	function setupThemeToggle() {
		var themeDropdown = document.querySelector("#theme-dropdown");
		var themeButton = document.getElementById("theme-button");
		var options = themeDropdown.querySelectorAll(".theme-option");

		if (!themeDropdown || !themeButton) return;

		function toggleDropdown() {
			var expanded = themeButton.getAttribute("aria-expanded") === "true";
			themeButton.setAttribute("aria-expanded", !expanded);
			themeDropdown.classList.toggle("active");
		}

		function selectTheme(option) {
			var theme = option.getAttribute("data-theme");
			setTheme(theme);
			toggleDropdown();
			themeButton.focus();
		}

		themeButton.addEventListener("click", toggleDropdown);

		themeButton.addEventListener("keydown", function (e) {
			if (e.key === "ArrowDown" || e.key === "Enter" || e.key === " ") {
				e.preventDefault();
				toggleDropdown();
			}
		});

		options.forEach((option, index) => {
			option.addEventListener("click", () => selectTheme(option));

			option.addEventListener("keydown", (e) => {
				if (e.key === "Enter" || e.key === " ") {
					e.preventDefault();
					selectTheme(option);
				} else if (e.key === "ArrowDown") {
					e.preventDefault();
					options[(index + 1) % options.length].focus();
				} else if (e.key === "ArrowUp") {
					e.preventDefault();
					options[(index - 1 + options.length) % options.length].focus();
				} else if (e.key === "Escape") {
					toggleDropdown();
					themeButton.focus();
				}
			});
		});

		document.addEventListener("click", (e) => {
			if (
				!themeDropdown.contains(e.target) &&
				!themeButton.contains(e.target) &&
				themeDropdown.classList.contains("active")
			) {
				toggleDropdown();
			}
		});
	}

	setupThemeToggle();

	document.addEventListener("astro:after-swap", setupThemeToggle);

	document.addEventListener("astro:page-load", () => {
		var currentTheme = localStorage.getItem("theme");
		if (currentTheme) {
			setTheme(currentTheme);
		}
	});
</script>
